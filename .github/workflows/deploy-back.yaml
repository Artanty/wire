name: Push to Another Repository

on:
  push:
    branches: [ master ]

permissions:
  contents: write
  actions: write

jobs:
  build:
    runs-on: ubuntu-latest
    # container: pandoc/latex

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      # - name: Checkout Code
      #   uses: actions/checkout@v3

      # - name: Fetch Secret from Common Repo
      #   run: |
      #     curl -H "Authorization: token ${{ secrets.PAT }}" \
      #     ${GITHUB_API_URL}/repos/${GITHUB_REPOSITORY}/contents/secrets.env

      # - name: Trigger action(2) in repo(2)
      #   uses: actions/github-script@v6
      #   with:
      #     script: |
      #       const { data: { token } } = await github.rest.actions.createWorkflowDispatch({
      #         owner: 'Artanty',
      #         repo: 'shared-secrets',
      #         workflow_id: 'action.yml',
      #         ref: 'master',
      #         inputs: {
      #           WIRE_URL: process.env.WIRE_URL
      #         }
      #       });

      # - name: Import secrets
      #   uses: actions/github-script@v5
      #   with:
      #     script: |
      #       const { data: secrets } = await github.rest.actions.listRepoSecrets({
      #         owner: 'Artanty',
      #         repo: 'try15'
      #       });
      #       for (const secret of secrets.secrets) {
      #         core.setSecret(secret.name);
      #         core.exportVariable(secret.name, process.env[secret.name]);
      #       }
      # - name: Secrets Sync
      #   uses: jpoehnelt/secrets-sync-action@v1.9.0
      #   with:
      #     SECRETS: |
      #       ^WIRE_URL$
      #     REPOSITORIES: |
      #       Artanty/shared-secrets
      #     DRY_RUN: true
      #     GITHUB_TOKEN: ${{ secrets.FINE_TOKEN }}
      #     CONCURRENCY: 10
      #   env:
      #     WIRE_URL: ${{secrets.WIRE_URL}}
      #     FOO: ${{github.run_id}}
      #     FOOBAR: BAZ

      # - name: Set secret
      #   run: |
      #     echo "::add-mask::$WIRE_URL"
      #     echo "The secret value is: $WIRE_URL"
      #   env:
      #     WIRE_URL: ${{ secrets.WIRE_URL }}

      # - name: Checkout private action repo
      #   uses: actions/checkout@v2
      #   with:
      #     repository: "artanty/shared-secret"
      - name: Fetch secret from another repo
        id: fetch_secret
        run: |
          response=$(curl -H "Authorization: token ${{ secrets.TOKEN2024 }}" \
                          -H "Accept: application/vnd.github.v3+json" \
                          "${GITHUB_API_URL}/repos/Artanty/shared-secrets/actions/secrets/WIRE_URL")
          echo "secret_response=$response" >> $GITHUB_OUTPUT

      # - name: Log the secret (for debugging purposes only)
      #   run: |
      #     echo "Secret Response: ${{ steps.fetch_secret.outputs.secret_response }}"
          
      # - name: Get WIRE_URL
      #   id: get_wire_url 
      #   uses: "artanty/shared-secrets@master"

      # - name: Extract part of repository name
      #   id: extract_repo_part
      #   run: |
      #     REPO_PART=${GITHUB_REPOSITORY##*/}
      #     echo "repo_part=$REPO_PART" >> $GITHUB_OUTPUT

      # - name: Send POST request
      #   id: send_post_request
      #   run: |
      #     RESPONSE=$(curl -s -X POST -H "Content-Type: application/json" \
      #     -d "{\"projectId\":\"${{ steps.extract_repo_part.outputs.repo_part }}@github\",\"state\":\"DEPLOY\"}" \
      #     ${{ steps.get_wire_url.outputs.wire_url }})
      #     echo "Response: $RESPONSE"
      #     echo "response=$RESPONSE" >> $GITHUB_OUTPUT

      # - name: Check for TARGET_VERCEL_JSON in response
      #   id: check_vercel_json
      #   run: |
      #     JSON="${{ fromJson(steps.send_post_request.outputs.response).data.TARGET_VERCEL_JSON }}"
      #     if [ -n "$JSON" ]; then
      #       echo "vercel_json_present=true" >> $GITHUB_OUTPUT
      #     else
      #       echo "vercel_json_present=false" >> $GITHUB_OUTPUT
      #     fi

      # - name: Create vercel.json file if TARGET_VERCEL_JSON is present
      #   if: steps.check_vercel_json.outputs.vercel_json_present == 'true'
      #   run: |
      #     SOURCE="${{ fromJson(steps.send_post_request.outputs.response).data.TARGET_VERCEL_JSON }}"
      #     JSON='{
      #       "version": 2,
      #       "builds": [
      #         {
      #           "src": "'"$SOURCE"'",
      #           "use": "@vercel/node"
      #         }
      #       ],
      #       "routes": [
      #         {
      #           "src": "/(.*)",
      #           "dest": "'"$SOURCE"'"
      #         }
      #       ],
      #       "installCommand": "npm install"
      #     }'
      #     echo "$JSON" > vercel.json

      # - name: Set environment variables and push to another repository
      #   run: |
      #     echo "TARGET_GIT_TOKEN=${{ fromJson(steps.send_post_request.outputs.response).data.TARGET_GIT_TOKEN }}" >> $GITHUB_ENV
      #     echo "TARGET_GIT_USER=${{ fromJson(steps.send_post_request.outputs.response).data.TARGET_GIT_USER }}" >> $GITHUB_ENV
      #     echo "TARGET_GIT_REPO=${{ fromJson(steps.send_post_request.outputs.response).data.TARGET_GIT_REPO }}" >> $GITHUB_ENV

      # - name: Pushes to another repository
      #   uses: cpina/github-action-push-to-another-repository@main
      #   env:
      #     API_TOKEN_GITHUB: ${{ env.TARGET_GIT_TOKEN }}
      #   with:
      #     source-directory: '.'
      #     destination-github-username: ${{ env.TARGET_GIT_USER }}
      #     destination-repository-name: ${{ env.TARGET_GIT_REPO }}
      #     user-email: carles3@pina.cat
      #     target-branch: main